# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

-- Show all the data.
SELECT * FROM BIT_DB.Spotifydata;

-- What is the average danceability, popularity, and energy by artist and track?
SELECT artist_name, track_name
, avg(danceability), avg(popularity),avg(energy)
FROM BIT_DB.Spotifydata
GROUP BY artist_name, track_name;

-- Who are the top 10 artists based on popularity?
SELECT artist_name
, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc
LIMIT 10;

-- What artist released the longest song?
SELECT artist_name, track_name
, max(duration_ms)
FROM BIT_DB.Spotifydata;

-- What's the average danceability for the 10 most popular songs
SELECT track_name
, avg(danceability)
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY popularity desc
LIMIT 10;

-- How danceability of the song influences its popularity?
SELECT track_name
 , artist_name
 , danceability
 , popularity
 FROM BIT_DB.Spotifydata
 GROUP BY popularity
 ORDER BY danceability DESC;
 
-- Create a playlist of songs with High danceability and High energy to workout to. 
SELECT track_name
 , artist_name
 , danceability
 , energy
FROM BIT_DB.Spotifydata
WHERE danceability > 0.7
AND energy > 0.8;

-- What is the average song length by each artist?
SELECT artist_name
, AVG(duration_ms) AS avg_duration
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg_duration DESC;

-- Label songs by danceablilty using the case funtion.
SELECT artist_name
     , track_name
     , danceability
,CASE 
    WHEN danceability >= 0.8 THEN 'High Danceabiliy'
    WHEN danceability >= 0.5 THEN 'Med Danceability'
    ELSE 'Low Danceability'
END AS danceability_level
FROM BIT_DB.Spotifydata
ORDER BY danceability_level, artist_name;

-- Calculate the average popularity for the artists in the Spotify data table. 
-- Then, for every artist with an average popularity of 90 or above, show their name, their average popularity, and label them as a “Top Star”.
WITH avg_popularity_CTE AS (
SELECT s1.artist_name
     , AVG(s1.popularity) AS avg_popularity
FROM Spotifydata s1
GROUP BY s1.artist_name
)

SELECT artist_name 
     , avg_popularity
     , 'Top Star' AS tag
FROM avg_popularity_CTE
WHERE avg_popularity >= 90.0
ORDER BY avg_popularity DESC;
